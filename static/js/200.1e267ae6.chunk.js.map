{"version":3,"file":"static/js/200.1e267ae6.chunk.js","mappings":"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","sources":["components/Button/Button.styled.jsx","components/Button/Button.jsx","components/FormError/FormError.styled.js","components/FormError/FormError.jsx","services/validation/validationLoginSchema.js","components/LoginForm/LoginForm.styled.jsx","components/Logo/Logo.styled.jsx","components/Logo/Logo.jsx","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.js","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled, { css } from 'styled-components';\n\nexport const ButtonStyled = styled.button`\n  width: ${({ theme }) => theme.spacing(60)};\n  height: ${({ theme }) => theme.spacing(12.5)};\n  background: ${({ theme }) => theme.colors.btnGradient};\n  border-radius: ${({ theme }) => theme.radii.button};\n  box-shadow: ${({ theme }) => theme.shadows.secondary};\n\n  color: ${({ theme }) => theme.colors.primaryFont};\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.regular};\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  letter-spacing: 1.8px;\n  text-transform: uppercase;\n  border: none;\n  cursor: pointer;\n\n  /* Вариант \"primary\" */\n  ${({ variant }) =>\n    variant === 'primary' &&\n    css`\n      background: ${({ theme }) => theme.colors.btnGradient};\n    `}\n\n  /* Вариант \"secondary\" */\n  ${({ variant }) =>\n    variant === 'secondary' &&\n    css`\n      color: ${({ theme }) => theme.colors.btnVioletText};\n      background: ${({ theme }) => theme.colors.btnWhiteBg};\n      border: ${({ theme }) => theme.borders.normal};\n      border-color: ${({ theme }) => theme.colors.blue};\n    `}\n /* Вариант \"third\" */\n      ${({ variant }) =>\n    variant === 'third' &&\n    css`\n      width: ${({ theme }) => theme.spacing(17.5)};\n      height: ${({ theme }) => theme.spacing(7.5)};\n    `}\n`;\n","import PropTypes from 'prop-types';\nimport { ButtonStyled } from './Button.styled';\n\nexport const Button = ({ onClick = null, text, type = 'button', variant = 'primary' }) => {\n  return (\n    <ButtonStyled type={type} onClick={onClick} variant={variant}>\n      {text}\n    </ButtonStyled>\n  );\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  text: PropTypes.string.isRequired,\n  type: PropTypes.string,\n  variant: PropTypes.string,\n};\n","import styled from 'styled-components';\n\nexport const ErrorText = styled.p`\n  color: ${({ theme }) => theme.colors.pink};\n  font-style: italic;\n  font-size: ${({ theme }) => theme.fontSizes.s};\n`;\n","import PropTypes from 'prop-types';\nimport { ErrorMessage } from 'formik';\nimport { ErrorText } from 'components/FormError/FormError.styled';\n\nexport const FormError = ({ name }) => {\n  return <ErrorMessage name={name} render={message => <ErrorText>{message}</ErrorText>} />;\n};\n\nFormError.propTypes = {\n  name: PropTypes.string.isRequired,\n};\n","import * as yup from 'yup';\n\nexport const loginSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Please enter a valid email address')\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .max(30, 'the name must contain a maximum of 30 characters'),\n  password: yup\n    .string()\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .min(6, 'Password must contain at least 6 characters')\n    .max(12, 'Password must contain a maximum of 12 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,12}$/,\n      'Password must contain at least one uppercase letter, one lowercase letter and one number'\n    ),\n});\n","import { Field, Form } from 'formik';\nimport styled from 'styled-components';\n\nexport const WrapperForm = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  width: 533px;\n  height: 570px;\n  margin: 0 auto;\n  border-radius: ${({ theme }) => theme.radii.normal};\n  box-shadow: ${({ theme }) => theme.shadows.primary};\n\n  background-color: ${({ theme }) => theme.colors.modalBackground};\n`;\n\nexport const FormStyled = styled(Form)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spacing(10)};\n`;\n\nexport const WrapperField = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const FieldStyled = styled(Field)`\n  margin-top: 35px;\n  width: ${({ theme }) => theme.spacing(102)};\n  height: ${({ theme }) => theme.spacing(9)};\n  outline: none;\n  border: none;\n  border-bottom: 2px solid grey;\n  background-color: rgba(255, 255, 255, 0);\n  color: grey;\n\n  &:focus {\n    outline: none;\n    border: none;\n    border-bottom: 2px solid grey;\n  }\n`;\n\nexport const WrapperButton = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  gap: ${({ theme }) => theme.spacing(5)};\n`;\n","import styled from 'styled-components';\n\nexport const WrapperLogo = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const TitleLogo = styled.h2`\n  color: ${({ theme }) => theme.colors.primaryFont};\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.regular};\n  font-size: 27px;\n  font-style: normal;\n  font-weight: 400;\n\n  letter-spacing: 1.8px;\n\n  cursor: pointer;\n`;\n","import React from 'react';\nimport { TitleLogo, WrapperLogo } from './Logo.styled';\n\nexport const Logo = () => {\n  return (\n    <WrapperLogo>\n      <div>Logo</div>\n\n      <TitleLogo>Money Guard</TitleLogo>\n    </WrapperLogo>\n  );\n};\n","import { Button } from 'components/Button/Button';\nimport { FormError } from 'components/FormError/FormError';\nimport { Formik } from 'formik';\nimport React from 'react';\nimport { loginSchema } from 'services/validation/validationLoginSchema';\nimport {\n  FieldStyled,\n  FormStyled,\n  WrapperButton,\n  WrapperField,\n  WrapperForm,\n} from './LoginForm.styled';\nimport { Logo } from 'components/Logo/Logo';\n\nexport const LoginForm = () => {\n  //const dispatch = useDispatch();\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const hendleSubmit = (value, { resetForm }) => {\n    //dispatch(logIn(value));\n    console.log(value);\n    resetForm();\n  };\n  return (\n    <div>\n      <WrapperForm>\n        <Logo />\n        <Formik\n          initialValues={initialValues}\n          validationSchema={loginSchema}\n          onSubmit={hendleSubmit}\n        >\n          <FormStyled autoComplete=\"off\">\n            {/* <label>\n            <span>Email</span> */}\n            <WrapperField>\n              <FieldStyled\n                type=\"text\"\n                name=\"email\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                placeholder=\"E-mail\"\n                required\n              />\n              <FormError name=\"email\" />\n              {/* </label> */}\n              {/* <label>\n            <span>Password</span> */}\n              <FieldStyled\n                type=\"tel\"\n                name=\"password\"\n                title=\"Phone number must be digits and can contain spaces, dashes\"\n                placeholder=\"Password\"\n                required\n              />\n              <FormError name=\"password\" />\n              {/* </label> */}\n            </WrapperField>\n            <WrapperButton>\n              <Button type=\"submit\" text=\"log in\" />\n              <Button type=\"submit\" text=\"register\" variant=\"secondary\" />\n            </WrapperButton>\n          </FormStyled>\n        </Formik>\n      </WrapperForm>\n    </div>\n  );\n};\n","import styled from 'styled-components';\nimport bgImage from 'assets/images/bgLoginPage.png';\n\nexport const BgImage = styled.div`\n  max-width: 1280px;\n  height: 720px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  background: linear-gradient(\n    220deg,\n    rgba(109, 84, 235, 0.73) 3.47%,\n    rgba(101, 35, 146, 0.73) 90.06%\n  );\n  background: linear-gradient(46deg, rgba(142, 46, 121, 0.68) 0%, rgba(171, 51, 173, 0.68) 100%);\n  background: #302e8e;\n\n  background-image: url(${bgImage});\n  background-size: cover;\n`;\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { BgImage } from './LoginPage.styled';\n\nconst LoginPage = () => {\n  return (\n    <BgImage>\n      <LoginForm />\n    </BgImage>\n  );\n};\n\nexport default LoginPage;\n"],"names":["ButtonStyled","styled","theme","spacing","colors","btnGradient","radii","button","shadows","secondary","primaryFont","fonts","regular","variant","css","btnVioletText","btnWhiteBg","borders","normal","blue","Button","onClick","text","type","ErrorText","pink","fontSizes","s","FormError","name","render","message","loginSchema","yup","shape","email","test","value","trim","required","max","password","min","matches","WrapperForm","primary","modalBackground","FormStyled","Form","WrapperField","FieldStyled","Field","WrapperButton","WrapperLogo","TitleLogo","Logo","LoginForm","initialValues","validationSchema","onSubmit","resetForm","console","log","autoComplete","title","placeholder","BgImage","bgImage"],"sourceRoot":""}