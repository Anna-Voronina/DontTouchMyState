{"version":3,"file":"static/js/793.2b6839ad.chunk.js","mappings":"4OAEaA,EAAcC,EAAAA,KAAaC,MAAM,CAC5CC,MAAOF,EAAAA,KAEJE,MAAM,sCACNC,KAAK,OAAQ,+CAA+C,SAAAC,GAC3D,OAAIA,GACKA,EAAMC,SAAWD,CAG3B,IACAE,SAAS,kBACTC,IAAI,GAAI,oDACXC,SAAUR,EAAAA,KAEPG,KAAK,OAAQ,+CAA+C,SAAAC,GAC3D,OAAIA,GACKA,EAAMC,SAAWD,CAG3B,IACAE,SAAS,kBACTG,IAAI,EAAG,+CACPF,IAAI,GAAI,oDACRG,QACC,mDACA,8F,gFCAOC,EAAY,WACvB,OAAoDC,EAAAA,EAAAA,GAAkB,CAAC,YAAa,cAA5EC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,yBACjBC,GAAWC,EAAAA,EAAAA,MAmBjB,OACE,UAAC,KAAD,YACE,SAACC,EAAA,EAAD,KACA,SAAC,KAAD,CAAQC,cApBU,CACpBhB,MAAO,GACPM,SAAU,IAkB8BW,iBAAkBpB,EAAaqB,SAfpD,SAAChB,EAAD,GAA2B,IAAjBiB,EAAgB,EAAhBA,UAC7BN,GAASO,EAAAA,EAAAA,IAAWlB,IACjBmB,SACAC,MAAK,SAAAC,GACJJ,IACAK,EAAAA,GAAAA,QAAA,UAAiBD,EAAKE,KAAKC,SAA3B,mBACD,IACAC,OAAM,SAAAC,GACLJ,EAAAA,GAAAA,MAAYI,EAAMC,QACnB,GACJ,EAKG,UACE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,KAAK,QACLC,KAAK,QACLC,MAAM,yIACNC,YAAY,SACZC,aAAa,MACb9B,UAAQ,KAEV,SAAC,KAAD,QAEF,SAAC+B,EAAA,EAAD,CAAWJ,KAAK,WAChB,UAAC,KAAD,YACE,UAAC,KAAD,YACE,SAAC,KAAD,CACED,KAAMnB,EAAcyB,UAAY,OAAS,WACzCL,KAAK,WACLC,MAAM,oEACNC,YAAY,WACZC,aAAa,MACb9B,UAAQ,KAEV,SAAC,KAAD,QAEF,SAAC,IAAD,CACEiC,aAAc1B,EAAcyB,UAC5BE,SAAU,kBAAM1B,EAAyB,YAA/B,QAGd,SAACuB,EAAA,EAAD,CAAWJ,KAAK,iBAElB,UAAC,KAAD,YACE,SAACQ,EAAA,EAAD,CAAQT,KAAK,SAASU,KAAK,YAC3B,SAAC,KAAD,CAAMC,GAAG,YAAT,UACE,SAACF,EAAA,EAAD,CAAQC,KAAK,WAAWE,QAAQ,0BAO7C,E,uFC3FYC,EAAUC,EAAAA,GAAAA,IAAH,kWAaMC,EAEEC,GCR5B,EARkB,WAChB,OACE,SAACH,EAAD,WACE,SAAClC,EAAD,KAGL,C","sources":["services/validation/validationLoginSchema.js","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.styled.js","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const loginSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email('Please enter a valid email address')\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .max(30, 'the name must contain a maximum of 30 characters'),\n  password: yup\n    .string()\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .min(6, 'Password must contain at least 6 characters')\n    .max(12, 'Password must contain a maximum of 12 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,12}$/,\n      'Password must contain at least one uppercase letter, one lowercase letter and one number'\n    ),\n});\n","import { Formik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { useDispatch } from 'react-redux';\nimport { toast } from 'react-toastify';\n\nimport { loginSchema } from 'services/validation/validationLoginSchema';\nimport { usePasswordToggle } from 'hooks/usePasswordToggle';\nimport { logInThunk } from 'redux/auth/authOperations';\n\nimport { Button } from 'components/Button/Button';\nimport { Logo } from 'components/Logo/Logo';\nimport { FormError } from 'components/FormError/FormError';\nimport { TogglePasswordIcon } from 'components/TogglePasswordVisibility/TogglePasswordVisibility';\n\nimport {\n  EmailIcon,\n  FieldStyled,\n  FormStyled,\n  PasswordlIcon,\n  WrapperButton,\n  WrapperField,\n  WrapperForm,\n  WrapperIcon,\n  WrapperIcon2,\n  WrapperIcon3,\n} from './LoginForm.styled';\n\nexport const LoginForm = () => {\n  const { showPasswords, togglePasswordVisibility } = usePasswordToggle(['password1', 'password2']);\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = (value, { resetForm }) => {\n    dispatch(logInThunk(value))\n      .unwrap()\n      .then(data => {\n        resetForm();\n        toast.success(`${data.user.username}, welcome back!`);\n      })\n      .catch(error => {\n        toast.error(error.message);\n      });\n  };\n\n  return (\n    <WrapperForm>\n      <Logo />\n      <Formik initialValues={initialValues} validationSchema={loginSchema} onSubmit={handleSubmit}>\n        <FormStyled>\n          <WrapperField>\n            <WrapperIcon>\n              <FieldStyled\n                type=\"email\"\n                name=\"email\"\n                title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                placeholder=\"E-mail\"\n                autoComplete=\"off\"\n                required\n              />\n              <EmailIcon />\n            </WrapperIcon>\n            <FormError name=\"email\" />\n            <WrapperIcon3>\n              <WrapperIcon2>\n                <FieldStyled\n                  type={showPasswords.password1 ? 'text' : 'password'}\n                  name=\"password\"\n                  title=\"Enter the password more difficult, letter, digit, capital letter.\"\n                  placeholder=\"Password\"\n                  autoComplete=\"off\"\n                  required\n                />\n                <PasswordlIcon />\n              </WrapperIcon2>\n              <TogglePasswordIcon\n                showPassword={showPasswords.password1}\n                onToggle={() => togglePasswordVisibility('password1')}\n              />\n            </WrapperIcon3>\n            <FormError name=\"password\" />\n          </WrapperField>\n          <WrapperButton>\n            <Button type=\"submit\" text=\"log in\" />\n            <Link to=\"/register\">\n              <Button text=\"register\" variant=\"secondary\" />\n            </Link>\n          </WrapperButton>\n        </FormStyled>\n      </Formik>\n    </WrapperForm>\n  );\n};\n","import styled from 'styled-components';\nimport bgImage from 'assets/images/bgLoginPage.png';\nimport mobileLoginBack from 'assets/images/mobileLoginBack.png';\n\nexport const BgImage = styled.div`\n  max-width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  background-position: center;\n  background-repeat: no-repeat;\n\n  background: #302e32;\n\n  background-size: cover;\n  background-image: url(${mobileLoginBack});\n  @media (min-width: 768px) {\n    background-image: url(${bgImage});\n  }\n`;\n","import { LoginForm } from 'components/LoginForm/LoginForm';\nimport { BgImage } from './LoginPage.styled';\n\nconst LoginPage = () => {\n  return (\n    <BgImage>\n      <LoginForm />\n    </BgImage>\n  );\n};\n\nexport default LoginPage;\n"],"names":["loginSchema","yup","shape","email","test","value","trim","required","max","password","min","matches","LoginForm","usePasswordToggle","showPasswords","togglePasswordVisibility","dispatch","useDispatch","Logo","initialValues","validationSchema","onSubmit","resetForm","logInThunk","unwrap","then","data","toast","user","username","catch","error","message","type","name","title","placeholder","autoComplete","FormError","password1","showPassword","onToggle","Button","text","to","variant","BgImage","styled","mobileLoginBack","bgImage"],"sourceRoot":""}