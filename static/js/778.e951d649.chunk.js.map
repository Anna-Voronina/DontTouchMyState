{"version":3,"file":"static/js/778.e951d649.chunk.js","mappings":"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","sources":["services/validation/validationRegisterSchema.js","components/IndicatorPasswordStrenght/IndicatorPasswordStrenghtatyled.js","components/IndicatorPasswordStrenght/IndicatorPasswordStrenght.jsx","hooks/usePasswordStrength.js","components/ConfirmPasswordIndicator/ConfirmPasswordIndicator.styled.js","components/ConfirmPasswordIndicator/ConfirmPasswordIndicator.jsx","components/RegisterForm/RegisterForm.styled.js","components/RegisterForm/RegisterForm.jsx","pages/RegisterPage/RegisterPage.styled.js","pages/RegisterPage/RegisterPage.jsx"],"sourcesContent":["import * as yup from 'yup';\n\nexport const registerSchema = yup.object().shape({\n  username: yup\n    .string()\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .max(30, 'the name must contain a maximum of 30 characters'),\n  email: yup\n    .string()\n    .email('Please enter a valid email address')\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .max(30, 'the name must contain a maximum of 30 characters'),\n  password: yup\n    .string()\n    .test('trim', 'The field must not start or end with spaces', value => {\n      if (value) {\n        return value.trim() === value;\n      }\n      return true;\n    })\n    .required('required field')\n    .min(6, 'Password must contain at least 6 characters')\n    .max(12, 'Password must contain a maximum of 20 characters')\n    .matches(\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{6,20}$/,\n      'Password must contain at least one uppercase letter, one lowercase letter and one number'\n    ),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref('password'), null], 'Passwords must match')\n    .required('Confirm Password is required'),\n});\n","import styled, { css, keyframes } from 'styled-components';\n\nconst passwordStrengthAnimation = keyframes`\n  from {\n    width: 0%;\n    background-color: transparent;\n  }\n  to {\n    width:100%;\n    background-color: ${props => props.color};\n  }\n`;\n\nexport const PasswordStrengthIndicator = styled.div`\n  width: 100%;\n  height: 3px;\n  background-color: transparent;\n  border-radius: 5px;\n  animation: ${passwordStrengthAnimation} 0.5s ease;\n  width: ${props => props.width};\n  background-color: ${props => props.color};\n  transition: all 0.4s ease-out;\n  ${props => css`\n    background-color: ${props.color};\n  `};\n`;\n\nexport const PasswordStrengthText = styled.p`\n  margin-top: 5px;\n  color: ${props => props.color};\n  font-size: 14px;\n  font-weight: bold;\n`;\n","import PropTypes from 'prop-types';\nimport { usePasswordStrength } from 'hooks/usePasswordStrength';\nimport { PasswordStrengthIndicator, PasswordStrengthText } from './IndicatorPasswordStrenghtatyled';\n\nexport const IndicatorPasswordStrenghtatyled = ({ values }) => {\n  const { getPasswordStrengthWidth, getPasswordStrengthColor, getPasswordStrengthText } =\n    usePasswordStrength();\n\n  return (\n    <>\n      <PasswordStrengthIndicator\n        width={getPasswordStrengthWidth(values.password)}\n        color={getPasswordStrengthColor(values.password)}\n      />\n      <PasswordStrengthText color={getPasswordStrengthColor(values.password)}>\n        {getPasswordStrengthText(values.password)}\n      </PasswordStrengthText>\n    </>\n  );\n};\n\nIndicatorPasswordStrenghtatyled.propTypes = {\n  values: PropTypes.shape({\n    password: PropTypes.string,\n  }).isRequired,\n};\n","export const usePasswordStrength = () => {\n  const getPasswordStrengthWidth = password => {\n    const maxLength = 10;\n    const passwordLength = password?.length || 0;\n    const strengthPercentage = (passwordLength / maxLength) * 100;\n    return `${Math.min(strengthPercentage, 100)}%`;\n  };\n\n  const getPasswordStrengthColor = password => {\n    const passwordStrengthRanges = [\n      { length: 1, color: '#FD450B' },\n      { length: 3, color: '#FF6231' },\n      { length: 4, color: '#F37952' },\n      { length: 5, color: '#FC675D' },\n      { length: 6, color: '#F6C881' },\n      { length: 7, color: '#FBEC67' },\n      { length: 8, color: '#F8E32B' },\n      { length: 9, color: '#CAF98F' },\n      { length: 10, color: '#52E54F' },\n      { length: Infinity, color: '#099E06' }, // Для довжини більше 10\n    ];\n\n    const { color } = passwordStrengthRanges.find(range => password?.length <= range.length) || {\n      color: 'transparent',\n    };\n    return color;\n  };\n\n  const getPasswordStrengthText = password => {\n    const passwordStrengthRanges = [\n      { min: 2, max: 6, text: 'Weak Password' },\n      { min: 7, max: 10, text: 'Medium Strength Password' },\n      { min: 11, max: Infinity, text: 'Strong Password' },\n    ];\n\n    const { text } = passwordStrengthRanges.find(\n      range => password?.length >= range.min && password?.length <= range.max\n    ) || { text: '' };\n\n    return text;\n  };\n\n  return {\n    getPasswordStrengthWidth,\n    getPasswordStrengthColor,\n    getPasswordStrengthText,\n  };\n};\n","import styled from 'styled-components';\n\nexport const IndicatorWrapper = styled.div`\n  height: 3px;\n  background-color: ${props => (props.passwordsMatch ? 'green' : 'red')};\n  transition: all 0.4s ease-out;\n`;\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { IndicatorWrapper } from './ConfirmPasswordIndicator.styled';\n\nexport const ConfirmPasswordIndicator = ({ passwordsMatch, values: { confirmPassword } }) => {\n  const width = passwordsMatch ? '100%' : '50%';\n  return confirmPassword && <IndicatorWrapper passwordsMatch={passwordsMatch} style={{ width }} />;\n};\n\nConfirmPasswordIndicator.propTypes = {\n  passwordsMatch: PropTypes.bool.isRequired,\n};\n","import { Link } from 'react-router-dom';\nimport { WrapperForm } from 'components/LoginForm/LoginForm.styled';\n\nimport { BiSolidUserRectangle } from 'react-icons/bi';\nimport styled from 'styled-components';\n\nexport const WrapperFormReg = styled(WrapperForm)`\n  padding: 60px 62px;\n`;\n\nexport const LinkStyled = styled(Link)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  min-width: ${({ theme }) => theme.spacing(75)};\n  min-height: ${({ theme }) => theme.spacing(12.5)};\n\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.regular};\n  font-size: 18px;\n  font-style: normal;\n  font-weight: 400;\n  line-height: normal;\n  letter-spacing: 1.8px;\n  text-transform: uppercase;\n\n  color: ${({ theme }) => theme.colors.btnVioletText};\n  background: ${({ theme }) => theme.colors.btnWhiteBg};\n  border: ${({ theme }) => theme.borders.normal};\n  border-color: ${({ theme }) => theme.colors.blue};\n  border-radius: ${({ theme }) => theme.radii.button};\n  box-shadow: ${({ theme }) => theme.shadows.secondary};\n  cursor: pointer;\n  transition: transform 250ms ease-in-out;\n\n  &:focus,\n  &:hover {\n    border-radius: 18px;\n    border: 2px solid yellow;\n    transform: scale(1.01);\n    box-shadow: 1px 5px 8px 0px rgba(0, 0, 0, 0.5);\n  }\n`;\n\nexport const NameRegisterIcon = styled(BiSolidUserRectangle)`\n  height: 24px;\n  width: 24px;\n  color: grey;\n  position: absolute;\n  left: 8px;\n  top: 74%;\n  transform: translateY(-50%);\n  pointer-events: none;\n  z-index: 1;\n`;\n","import { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\n\nimport { registerSchema } from 'services/validation/validationRegisterSchema';\nimport { usePasswordToggle } from 'hooks/usePasswordToggle';\nimport { signUpThunk } from 'redux/auth/authOperations';\n\nimport { Button } from 'components/Button/Button';\nimport { FormError } from 'components/FormError/FormError';\nimport { Logo } from 'components/Logo/Logo';\nimport { IndicatorPasswordStrenghtatyled } from 'components/IndicatorPasswordStrenght/IndicatorPasswordStrenght';\nimport { TogglePasswordIcon } from 'components/TogglePasswordVisibility/TogglePasswordVisibility';\nimport { ConfirmPasswordIndicator } from 'components/ConfirmPasswordIndicator/ConfirmPasswordIndicator';\n\nimport { LinkStyled, NameRegisterIcon } from './RegisterForm.styled';\nimport {\n  EmailIcon,\n  FieldStyled,\n  FormStyled,\n  PasswordlIcon,\n  WrapperButton,\n  WrapperField,\n  WrapperForm,\n  WrapperIcon,\n  WrapperIcon2,\n  WrapperIcon3,\n} from 'components/LoginForm/LoginForm.styled';\nimport { toast } from 'react-toastify';\n\nexport const RegisterForm = () => {\n  const { showPasswords, togglePasswordVisibility } = usePasswordToggle(['password1', 'password2']);\n\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n  };\n\n  const handleSubmit = (value, { resetForm }) => {\n    const { username, email, password } = value;\n    dispatch(signUpThunk({ username, email, password }))\n      .unwrap()\n      .then(data => {\n        resetForm();\n        toast.success(`Отличная работа!${data.user.username}. Вы успешно вошли в систему`);\n      })\n      .catch(error => {\n        toast.error(error.message);\n      });\n    resetForm();\n  };\n\n  return (\n    <WrapperForm>\n      <Logo />\n      <Formik\n        initialValues={initialValues}\n        validationSchema={registerSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ values, handleChange, handleBlur, touched, errors }) => (\n          <FormStyled autoComplete=\"off\">\n            <WrapperField>\n              <WrapperIcon>\n                <FieldStyled\n                  type=\"text\"\n                  name=\"username\"\n                  placeholder=\"First name\"\n                  autoComplete=\"off\"\n                  required\n                />\n                <NameRegisterIcon />\n              </WrapperIcon>\n              <FormError name=\"username\" touched={touched} errors={errors} />\n              <WrapperIcon>\n                <FieldStyled\n                  type=\"email\"\n                  name=\"email\"\n                  placeholder=\"Email\"\n                  autoComplete=\"off\"\n                  required\n                />\n                <EmailIcon />\n              </WrapperIcon>\n              <FormError name=\"email\" touched={touched} errors={errors} />\n\n              <WrapperIcon3>\n                <WrapperIcon2>\n                  <FieldStyled\n                    type={showPasswords.password1 ? 'text' : 'password'}\n                    name=\"password\"\n                    title=\"Enter the password more difficult, letter, digit, capital letter.\"\n                    placeholder=\"Password\"\n                    required\n                    value={values.password}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    autoComplete=\"off\"\n                  />\n                  <PasswordlIcon />\n                </WrapperIcon2>\n                <TogglePasswordIcon\n                  showPassword={showPasswords.password1}\n                  onToggle={() => togglePasswordVisibility('password1')}\n                />\n              </WrapperIcon3>\n              <IndicatorPasswordStrenghtatyled values={values} />\n              <FormError name=\"password\" touched={touched} errors={errors} />\n\n              <WrapperIcon3>\n                <WrapperIcon2>\n                  <FieldStyled\n                    type={showPasswords.password2 ? 'text' : 'password'}\n                    name=\"confirmPassword\"\n                    title=\"Enter the password more difficult, letter, digit, capital letter.\"\n                    placeholder=\"Confirm Password\"\n                    autoComplete=\"off\"\n                    required\n                  />\n                  <PasswordlIcon />\n                </WrapperIcon2>\n                <TogglePasswordIcon\n                  showPassword={showPasswords.password2}\n                  onToggle={() => togglePasswordVisibility('password2')}\n                />\n              </WrapperIcon3>\n              <ConfirmPasswordIndicator\n                values={values}\n                passwordsMatch={\n                  values.password === values.confirmPassword && values.confirmPassword !== ''\n                }\n              />\n              <FormError name=\"confirmPassword\" />\n            </WrapperField>\n            <WrapperButton>\n              <Button type=\"submit\" text=\"register\" />\n              <LinkStyled to=\"/login\">Log in</LinkStyled>\n            </WrapperButton>\n          </FormStyled>\n        )}\n      </Formik>\n    </WrapperForm>\n  );\n};\n","import styled from 'styled-components';\nimport bgImage from 'assets/images/GradientRegister.png';\nimport mobileLoginBack from 'assets/images/mobileLoginBack.png';\nexport const RegisterPageWrapper = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n\n  background: #302e32;\n  background-image: url(${mobileLoginBack});\n  background-size: cover;\n  background-position: center;\n  background-repeat: no-repeat;\n\n  @media (min-width: 768px) {\n    background-image: url(${bgImage});\n  }\n`;\n","import { RegisterForm } from 'components/RegisterForm/RegisterForm';\nimport { RegisterPageWrapper } from './RegisterPage.styled';\n\nconst RegisterPage = () => {\n  return (\n    <RegisterPageWrapper>\n      <RegisterForm />\n    </RegisterPageWrapper>\n  );\n};\n\nexport default RegisterPage;\n"],"names":["registerSchema","yup","shape","username","test","value","trim","required","max","email","password","min","matches","confirmPassword","oneOf","passwordStrengthAnimation","keyframes","props","color","PasswordStrengthIndicator","styled","width","css","PasswordStrengthText","IndicatorPasswordStrenghtatyled","values","getPasswordStrengthWidth","strengthPercentage","length","Math","getPasswordStrengthColor","Infinity","find","range","getPasswordStrengthText","text","IndicatorWrapper","passwordsMatch","ConfirmPasswordIndicator","style","LinkStyled","WrapperForm","Link","theme","spacing","fonts","regular","colors","btnVioletText","btnWhiteBg","borders","normal","blue","radii","button","shadows","secondary","NameRegisterIcon","BiSolidUserRectangle","RegisterForm","usePasswordToggle","showPasswords","togglePasswordVisibility","dispatch","useDispatch","Logo","initialValues","validationSchema","onSubmit","resetForm","signUpThunk","unwrap","then","data","toast","user","catch","error","message","handleChange","handleBlur","touched","errors","autoComplete","type","name","placeholder","FormError","password1","title","onChange","onBlur","showPassword","onToggle","password2","Button","to","RegisterPageWrapper","mobileLoginBack","bgImage"],"sourceRoot":""}